<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>home</title><link>https://fletcher.gornick.dev/</link><description>Recent content on home</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://fletcher.gornick.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>bsp tree demo</title><link>https://fletcher.gornick.dev/projects/bsp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fletcher.gornick.dev/projects/bsp/</guid><description> bsp tree demo Below is an applet to visualize the process of constructing a binary space partition tree (BSP tree for short), as well as a demonstration of real-time CPU rendering of a scene. (source code can be found here.)</description><content:encoded><![CDATA[<html lang="en-us">
  <head>
    <style>
        body { overflow: hidden; }
        :root { 
            --main-width: 90%; 
            --nav-width: 100%;
            margin-left: 5%; 
        }
        canvas.emscripten { border: 0px none; width: 100%; }
    </style>

    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="title" content="bsp tree demo">
    <meta name="description" content="CSCI 8442 BSP Tree Visual Demonstration">
    <meta name="viewport" content="width=device-width">
    <title>bsp tree demo</title>

    <script type='text/javascript' src="https://cdn.jsdelivr.net/gh/eligrey/FileSaver.js/dist/FileSaver.min.js"> </script>
    <script type='text/javascript'>
        function saveFileFromMEMFSToDisk(memoryFSname, localFSname)     // This can be called by C/C++ code
        {
            var data = FS.readFile(memoryFSname);
            var blob = new Blob([data.buffer], { type: "application/octet-binary" });
            saveAs(blob, localFSname);
        }
    </script>
    <script>
        window.addEventListener('keydown', function(e) {
            if (['Space', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].indexOf(e.code) > -1) {
                e.preventDefault();
            }
        }, false);
    </script>
    </head>
    <body>
        <p>
            Below is an applet to visualize the process of constructing a binary space partition 
            tree (BSP tree for short), as well as a demonstration of real-time CPU rendering of a 
            scene. (source code can be found <a href="https://github.com/fmgornick/bsp.git">here</a>.)
        </p>
        <canvas class=emscripten id=canvas tabindex=-1></canvas>
        <p id="output" />
        <script>
            var Module = {
                print: (function() {
                    var element = document.getElementById('output');
                    if (element) element.value = ''; // clear browser cache
                    return function(text) {
                        if (arguments.length > 1) text = Array.prototype.slice.call(arguments).join(' ');
                        console.log(text);
                        if (element) {
                          element.value += text + "\n";
                          element.scrollTop = element.scrollHeight; // focus on bottom
                        }
                    };
                })(),
                canvas: (function() {
                    var canvas = document.getElementById('canvas');
                    return canvas;
                })()
            };
        </script>
        <script async type="text/javascript" src="game.js"></script>
    </body>
</html>
]]></content:encoded></item></channel></rss>